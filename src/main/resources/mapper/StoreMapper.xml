<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.onemm.business.mapper.real.StoreMapper">

    <select id="getStores" resultType="Map">
        select id,
               name,
               address,
               tel,
               homepage,
               average_rating,
               dong
        from onemm.store
    </select>


    <select id="getStoresByCategoryId" resultType="Map">
        select distinct s.id,
                        s.name,
                        s.address,
                        s.dong,
                        group_concat(distinct c.name) as category,
                        s.average_rating,
                        (select count(id)
                         from onemm.review
                         where s.id = review.store_id
                         group by review.store_id) as count
        from onemm.store s
            left join onemm.store_category sc
        on s.id = sc.store_id
            left join onemm.category c
            on c.id = sc.category_id
        where sc.category_id = #{categoryId}
        group by s.id, sc.store_id
    </select>


    <select id="getStoresWithCategory" resultType="Map">
        select distinct s.id,
                        s.name,
                        s.address,
                        s.dong,
                        group_concat(distinct c.name) as category,
                        s.average_rating,
                        (select count(id)
                         from onemm.review
                         where s.id = review.store_id
                         group by review.store_id) as count
        from onemm.store s
            left join onemm.store_category sc
        on s.id = sc.store_id
            left join onemm.category c
            on c.id = sc.category_id
        group by s.id, sc.store_id
    </select>

    <select id="getStoreByName" resultType="Map">
        select id,
               name,
               address,
               tel,
               homepage,
               average_rating,
               dong
        from onemm.store
        where name = #{name}
    </select>

    <select id="getStoreById" resultType="Store">
        select s.id,
               s.name,
               s.address,
               s.tel,
               s.homepage,
               s.average_rating,
               s.dong,
               count(r.store_id) as count
        from onemm.store s
            left join onemm.review r
        on s.id = r.store_id
        where s.id = #{id}
    </select>

    <select id="getFacility" resultType="Map">
        select id, name, sf.store_id
        from onemm.facility
                 left join onemm.store_facility sf on id = sf.facility_id
        where sf.store_id = #{id};
    </select>

    <select id="getCategory" resultType="Map">
        select id, name
        from onemm.category
                 left join onemm.store_category sc on id = sc.category_id
        where sc.store_id = #{id};
    </select>

    <select id="getWorkDay" resultType="Map">
        select w.id, w.day, w.time
        from onemm.workday w
                 left join onemm.store s
                           on s.id = w.store_id
        where w.store_id = #{id};
    </select>

    <select id="getMenu" resultType="Map">
        select m.id, m.name, m.price
        from onemm.menu m
                 left join onemm.store s on m.store_id = s.id
        where m.store_id = #{id};
    </select>

    <select id="filterStoresByCategory" resultType="Map">
        select *
        from onemm.store
                 left join onemm.store_category sc on store.id = sc.store_id
        where sc.category_id = #{categoryId};
    </select>


    <update id="updateRating">
        UPDATE onemm.store s
            JOIN (
            select round(avg (rating), 1) avg, store_id
            from onemm.review
            group by store_id
            ) r
        ON r.store_id = s.id
            SET s.average_rating = r.avg
        WHERE s.id = #{id}
    </update>

    <select id="getStoresOrderByReviewCount" resultType="Map">
        select distinct s.id,
                        s.name,
                        s.address,
                        group_concat(distinct c.name) as category,
                        s.average_rating,
                        s.dong,
                        (select count(id)
                         from onemm.review
                         where s.id = review.store_id
                         group by review.store_id) as count
        from onemm.store s
            left join onemm.store_category sc
        on s.id = sc.store_id
            left join onemm.category c
            on c.id = sc.category_id
        group by s.id, sc.store_id
        order by s.average_rating desc, count desc
            limit 5
    </select>

</mapper>
