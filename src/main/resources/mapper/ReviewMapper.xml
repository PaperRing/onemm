<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.onemm.business.mapper.real.ReviewMapper">

    <insert id="saveReview" parameterType="ReviewDto" useGeneratedKeys="true" keyProperty="id">
        insert into onemm.review(store_id, user_id, content, rating, s3)
        values (#{storeId}, #{userId}, #{content}, #{rating,  jdbcType=DOUBLE}, #{s3})
    </insert>

    <!--    -->
    <select id="getReviewByStoreId" resultType="Map">
        select r.id,
               r.store_id,
               r.user_id,
               r.content,
               date_format(r.create_at, '%Y-%m-%d') as create_at,
               date_format(r.update_at, '%Y-%m-%d') as update_at,
               r.rating,
               r.s3                                 as review_s3,
               u.name                               as user_name,
               u.photo_url,
               u.s3
        from onemm.review r
                 left join onemm.user u on r.user_id = u.id
        where r.store_id = #{storeId}
          and r.user_id not in (select block_user_id from onemm.block_user bu where bu.user_id = #{userId})
        order by id desc
    </select>

    <update id="updateReview">
        update onemm.review
        set content = #{reviewDto.content},
            rating  = #{reviewDto.rating},
            s3      = #{reviewDto.s3}
        where id = #{id}
    </update>

    <select id="getReviewByUser" resultType="Map">
        select r.id,
               r.store_id,
               r.user_id,
               r.content,
               date_format(r.create_at, '%Y-%m-%d') as create_at,
               date_format(r.update_at, '%Y-%m-%d') as update_at,
               r.rating,
               r.s3                                 as review_s3,
               s.name                               as store_name,
               u.name                               as user_name,
               u.photo_url,
               u.s3
        from onemm.review r
                 left outer join onemm.store s
                                 on r.store_id = s.id
                 left join onemm.user u on r.user_id = u.id
        where user_id = #{userId}
        order by r.id desc
    </select>

    <!--    -->
    <select id="getOrderBySelectedReview" resultType="Map">
        select r.id,
               r.store_id,
               r.user_id,
               r.content,
               date_format(r.create_at, '%Y-%m-%d') as create_at,
               date_format(r.update_at, '%Y-%m-%d') as update_at,
               r.rating,
               r.s3                                 as review_s3,
               u.name                               as user_name,
               u.photo_url,
               u.s3
        from onemm.review r
                 left join onemm.user u on r.user_id = u.id
        where store_id = #{storeId}
          and r.user_id not in (select block_user_id from onemm.block_user bu where bu.user_id = #{userId})
        ORDER BY FIELD(r.id, #{id}) desc
    </select>


    <select id="getReviewById" resultType="ReviewDto">
        select r.id,
               r.store_id,
               r.user_id,
               r.content,
               r.rating,
               r.s3 as review_s3
        from onemm.review r
        where r.id = #{id}
    </select>

    <delete id="deleteReview">
        delete
        from onemm.review
        where id = #{id}
    </delete>

    <select id="getLatestReviewImage" resultType="ReviewDto">
        select r.id,
               r.store_id,
               r.user_id,
               r.content,
               r.rating,
               r.s3
        from onemm.review r
        where r.s3 = true
          and r.store_id = #{storeId}
        order by r.id desc limit 1
    </select>
</mapper>